name: 'Build and push images'
description: 'Build and push the docker images for the p1 system to docker hub'
inputs:
  docker_username:
    description: 'docker username'
    required: true
    default: ''
  docker_token:
    description: 'docker token'
    required: true
    default: ''
  image:
    description: 'registry + image name'
    required: true
    default: 'docker.io/tijsvanerp/vanerp.io'
  folder:
    description: 'Folder to build from'
    required: true
    default: 'persister'
  tags:
    description: 'Tags for the docker image'
    required: true
    default: |
      type=semver,prefix=persister-,suffix=,pattern=v{{version}}
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.x'
    - name: Install dependencies
      run: go get ./${{ inputs.folder }}
      shell: bash
    - name: Test with the Go CLI
      run: go test ./${{ inputs.folder }}/...
      shell: bash
    - name: Build the binaries
      run: make BUILD_PATH=${{ inputs.folder }} VERSION_TAG=${{ github.ref_name }} linux 
      shell: bash
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_token }}
    - name: Extract metadata for the Docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.image }}
        tags: ${{ inputs.tags }}
    - name: build and push docker image to registry
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        file: ${{ inputs.folder }}/Dockerfile
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args:
          - BUILD_FOLDER=${{ inputs.folder }}
    - name: Cleanup the binaries
      run: make BUILD_PATH=${{ inputs.folder }} clean_build 
      shell: bash
